// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnetapp.Data;

#nullable disable

namespace dotentapp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("dotnetapp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("dotnetapp.Models.Contest", b =>
                {
                    b.Property<int>("ContestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContestId"), 1L, 1);

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JoinedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WinnerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContestId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JoinedByUserId");

                    b.HasIndex("MatchId");

                    b.HasIndex("WinnerUserId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("dotnetapp.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeamA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            MatchId = 1,
                            Date = new DateTime(2025, 9, 11, 16, 38, 38, 232, DateTimeKind.Local).AddTicks(8299),
                            TeamA = "India",
                            TeamB = "Australia"
                        });
                });

            modelBuilder.Entity("dotnetapp.Models.MatchPlayer", b =>
                {
                    b.Property<int>("MatchPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchPlayerId"), 1L, 1);

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("MatchPlayerId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayers");
                });

            modelBuilder.Entity("dotnetapp.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            Name = "Virat Kohli",
                            Role = 0,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 2,
                            Name = "Rohit Sharma",
                            Role = 1,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 3,
                            Name = "KL Rahul",
                            Role = 2,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 4,
                            Name = "Hardik Pandya",
                            Role = 3,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 5,
                            Name = "MS Dhoni",
                            Role = 0,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 6,
                            Name = "Jasprit Bumrah",
                            Role = 1,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 7,
                            Name = "Mohammad Shami",
                            Role = 2,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 8,
                            Name = "Ravindra Jadeja",
                            Role = 3,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 9,
                            Name = "Yuzvendra Chahal",
                            Role = 0,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 10,
                            Name = "Shikhar Dhawan",
                            Role = 1,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 11,
                            Name = "Rishabh Pant",
                            Role = 2,
                            Team = "India"
                        },
                        new
                        {
                            PlayerId = 12,
                            Name = "David Warner",
                            Role = 3,
                            Team = "Australia"
                        },
                        new
                        {
                            PlayerId = 13,
                            Name = "Steve Smith",
                            Role = 0,
                            Team = "Australia"
                        },
                        new
                        {
                            PlayerId = 14,
                            Name = "Pat Cummins",
                            Role = 1,
                            Team = "Australia"
                        },
                        new
                        {
                            PlayerId = 15,
                            Name = "Glenn Maxwell",
                            Role = 2,
                            Team = "Australia"
                        },
                        new
                        {
                            PlayerId = 16,
                            Name = "Marcus Stoinis",
                            Role = 3,
                            Team = "Australia"
                        },
                        new
                        {
                            PlayerId = 17,
                            Name = "Josh Hazlewood",
                            Role = 0,
                            Team = "Australia"
                        },
                        new
                        {
                            PlayerId = 18,
                            Name = "Adam Zampa",
                            Role = 1,
                            Team = "Australia"
                        },
                        new
                        {
                            PlayerId = 19,
                            Name = "Aaron Finch",
                            Role = 2,
                            Team = "Australia"
                        },
                        new
                        {
                            PlayerId = 20,
                            Name = "Matthew Wade",
                            Role = 3,
                            Team = "Australia"
                        },
                        new
                        {
                            PlayerId = 21,
                            Name = "Mitchell Starc",
                            Role = 0,
                            Team = "Australia"
                        });
                });

            modelBuilder.Entity("dotnetapp.Models.UserTeam", b =>
                {
                    b.Property<int>("UserTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTeamId"), 1L, 1);

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserTeamId");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("dotnetapp.Models.UserTeamPlayer", b =>
                {
                    b.Property<int>("UserTeamId")
                        .HasColumnType("int");

                    b.Property<int>("MatchPlayerId")
                        .HasColumnType("int");

                    b.HasKey("UserTeamId", "MatchPlayerId");

                    b.HasIndex("MatchPlayerId");

                    b.ToTable("UserTeamPlayers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("dotnetapp.Models.Contest", b =>
                {
                    b.HasOne("dotnetapp.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedContests")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnetapp.Models.ApplicationUser", "JoinedByUser")
                        .WithMany("JoinedContests")
                        .HasForeignKey("JoinedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dotnetapp.Models.Match", "Match")
                        .WithMany("Contests")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapp.Models.ApplicationUser", "WinnerUser")
                        .WithMany()
                        .HasForeignKey("WinnerUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("JoinedByUser");

                    b.Navigation("Match");

                    b.Navigation("WinnerUser");
                });

            modelBuilder.Entity("dotnetapp.Models.MatchPlayer", b =>
                {
                    b.HasOne("dotnetapp.Models.Match", "Match")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapp.Models.Player", "Player")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("dotnetapp.Models.UserTeam", b =>
                {
                    b.HasOne("dotnetapp.Models.Contest", "Contest")
                        .WithMany("UserTeams")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapp.Models.ApplicationUser", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotnetapp.Models.UserTeamPlayer", b =>
                {
                    b.HasOne("dotnetapp.Models.MatchPlayer", "MatchPlayer")
                        .WithMany("UserTeamPlayers")
                        .HasForeignKey("MatchPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dotnetapp.Models.UserTeam", "UserTeam")
                        .WithMany("UserTeamPlayers")
                        .HasForeignKey("UserTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MatchPlayer");

                    b.Navigation("UserTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dotnetapp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dotnetapp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dotnetapp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dotnetapp.Models.ApplicationUser", b =>
                {
                    b.Navigation("CreatedContests");

                    b.Navigation("JoinedContests");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("dotnetapp.Models.Contest", b =>
                {
                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("dotnetapp.Models.Match", b =>
                {
                    b.Navigation("Contests");

                    b.Navigation("MatchPlayers");
                });

            modelBuilder.Entity("dotnetapp.Models.MatchPlayer", b =>
                {
                    b.Navigation("UserTeamPlayers");
                });

            modelBuilder.Entity("dotnetapp.Models.Player", b =>
                {
                    b.Navigation("MatchPlayers");
                });

            modelBuilder.Entity("dotnetapp.Models.UserTeam", b =>
                {
                    b.Navigation("UserTeamPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
